
==================== FINAL INTERFACE ====================
2016-08-20 20:52:34.404204 UTC

interface main@main:Futoshiki 7103
  interface hash: 8183f629e86a8ea150fa2dc9d89bad23
  ABI hash: 8e5a682e848ba6c416fe7eed2ff07004
  export-list hash: 1bb2b32e3994a1c059da388bb01caadf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 00e643ad7ce35edfdec2c9358b896e07
  sig of: Nothing
  used TH splices: False
  where
exports:
  Futoshiki.checkPuzzle
  Futoshiki.constraints
  Futoshiki.epsilons
  Futoshiki.main
  Futoshiki.matchClues
  Futoshiki.matchConstraints
  Futoshiki.movesToPuzzle
  Futoshiki.optimalPlay
  Futoshiki.p
  Futoshiki.prettyPrint
  Futoshiki.size
  Futoshiki.Constraint
  Futoshiki.Coordinate
  Futoshiki.Move
  Futoshiki.Puzzle
  Futoshiki.R
  Futoshiki.Value
module dependencies: Logic.GameLogic Logic.Utils
package dependencies: arithmoi-0.4.2.0@arith_FAxqgFQd9xLHklfP2QDenN
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 61f4bf9a28a6b2eb8805b671ced219c1
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Lazy d674f4ccc3ac46ead5b74c3dd9e4f6f4
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Strict 1c3e955bd48ee0eecb78cf325060b5fa
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Logic.GameLogic 26d44f799309be9333aa831cc195f912
  exports: 02a96d8251ab1656b811a49d270bd213
  J e62c617d76644dc2a111453607a27a3f
  bigotimes 344a9cb8123787eadef3d179968b7b85
  find 33d0a3fefbb5a1953b62f96514263af8
  setMinus 9e687f4ea98fa5bb19d6b1054c1ce9b4
import  -/  Logic.Utils 4b6cfc81861a0e9cb6b9d1c0337694b4
  exports: 6f05d3fc84eb066a695d3535eebd5624
  checkPuzzle aff386f2225df46fae5e508089a581aa
  movesToPuzzle a335e8fc15be1bafdb8a1ecc32ae0568
  prettyPrint 998a465caab100fca40c5ef4e218f02c
d0e5e270dd414e1e777ad01904b55991
  $s!1 ::
    Futoshiki.Coordinate
    -> Data.Map.Base.Map Futoshiki.Coordinate a -> a
  {- Arity: 2, Strictness: <S(SL),1*U(U(U),U(U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a1
                   w :: Futoshiki.Coordinate
                   w1 :: Data.Map.Base.Map Futoshiki.Coordinate a1 ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 Futoshiki.$wpoly_go10 @ a1 ww4 ww2 w1 } }) -}
5e379209575efd396ad41ecf249950a3
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> Data.Map.Base.Map Futoshiki.Coordinate a -> a
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
2610f29f178c5d06a7b5788dad47d153
  $wxs ::
    GHC.Prim.Int#
    -> (# [Futoshiki.Move]
          -> Logic.GameLogic.J Futoshiki.R Futoshiki.Move,
          [[Futoshiki.Move]
           -> Logic.GameLogic.J Futoshiki.R Futoshiki.Move] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
e1666d9d9007e703d7306a06940dbc90
  type Constraint =
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool,
     Futoshiki.Coordinate,
     Futoshiki.Coordinate)
77252b51f80bf07ed00468fd35038b5d
  type Coordinate = (GHC.Types.Int, GHC.Types.Int)
a4ec90cf3a8392274a9c80d14a51872d
  type Move = [Futoshiki.Value]
2f58f8fb0623767ece9e1489b799652d
  type Puzzle =
    Data.Map.Base.Map Futoshiki.Coordinate Futoshiki.Value
6a877439ac5a80f26837815f51d50a12
  type R = GHC.Types.Bool
4025d6e83da9862dfee268f01f23191f
  type Value = GHC.Types.Int
14ee9e6a3a0da1df1cb7cff276651808
  checkPuzzle :: [Logic.Utils.Move] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: [Logic.Utils.Move] ->
                 Logic.Utils.$wcheckPuzzle
                   Futoshiki.checkPuzzle1
                   4
                   GHC.Types.False
                   w3) -}
78d9fc63cad20173487bba6fd5d340a4
  checkPuzzle1 :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Futoshiki.size) -}
67bc8c295b006b62f1c8f008eade79ef
  constraints :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints15
                   Futoshiki.constraints1) -}
73dc83127ea6bf96054aa05a0861abf9
  constraints1 :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints13
                   Futoshiki.constraints2) -}
e27aad45628549176d38ceb0772c47d0
  constraints10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints11, Futoshiki.constraints8)) -}
efe4c0cea510cc4a8789ac2d6ef18891
  constraints11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
7ba3053a737a68433644d22e457ece25
  constraints12 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints11, Futoshiki.constraints6)) -}
5b5f8cbefcc0bc924e8482fac9e849cf
  constraints13 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.gtInt,
                  Futoshiki.constraints10,
                  Futoshiki.constraints14)) -}
a985961d8d74cb667f75a85ab0e32d8b
  constraints14 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints11, Futoshiki.constraints11)) -}
6cb27c71e88c2bed137f9a3b8165054b
  constraints15 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.ltInt,
                  Futoshiki.constraints17,
                  Futoshiki.constraints16)) -}
73a857ad55569638d5cd29a66089977c
  constraints16 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.size, Futoshiki.constraints11)) -}
6aa4f5c67a424e96207571aff9a20274
  constraints17 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints6, Futoshiki.constraints11)) -}
c103bc7773376ae9ea9873520c1abe92
  constraints2 :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints9
                   Futoshiki.constraints3) -}
7681ac69220670a08bdfa18ea99bf5f5
  constraints3 :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints4
                   (GHC.Types.[] @ Futoshiki.Constraint)) -}
d5b16f9c2d2756034f42c5e58bbbac3a
  constraints4 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.gtInt,
                  Futoshiki.constraints7,
                  Futoshiki.constraints5)) -}
d346b5e78d9d9c02375fbfa5bf336015
  constraints5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints6, Futoshiki.constraints6)) -}
d93db6add67a494ab72e56740384771f
  constraints6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
f144bc5f1dfc7cd3fb9254903fc6f918
  constraints7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints8, Futoshiki.constraints6)) -}
a64c371a2b05d555766a916ff766e290
  constraints8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
a64eb74e59dca3a88151333605d1783b
  constraints9 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.gtInt,
                  Futoshiki.constraints12,
                  Futoshiki.constraints10)) -}
6c7eff63e17f07a9c217d471eaa436e6
  epsilons ::
    [[Futoshiki.Move] -> Logic.GameLogic.J Futoshiki.R Futoshiki.Move]
  {- Unfolding: (case Futoshiki.$wxs 4 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ ([Futoshiki.Move]
                      -> Logic.GameLogic.J Futoshiki.R Futoshiki.Move)
                   ww1
                   ww2 }) -}
c13f4bc50fb10829a57ac9f379fb09c6
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Futoshiki.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
f2b72f262e11ffe82731bf633e0dfec1
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (Logic.Utils.prettyPrint
                      Futoshiki.checkPuzzle1
                      Futoshiki.optimalPlay)
                   GHC.Types.True
                   eta) -}
dd271bda24a5a0902fdc3b258fcdcec1
  matchClues :: [Futoshiki.Move] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Futoshiki.Move] ->
                 case ds of wild {
                   [] -> GHC.Types.False
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        [] -> GHC.Types.False
                        : ds3 ds4
                        -> case ds4 of wild2 {
                             [] -> GHC.Types.False
                             : ds5 ds6
                             -> case ds6 of wild3 {
                                  [] -> GHC.Types.False
                                  : ds7 ds8
                                  -> case ds8 of wild4 {
                                       [] -> GHC.Types.False
                                       : ds9 ds10
                                       -> case ds10 of wild5 {
                                            []
                                            -> case ds2 of wild6 {
                                                 [] -> GHC.Types.False
                                                 : ds11 ds12
                                                 -> case ds11 of wild7 {
                                                      [] -> GHC.Types.False
                                                      : ds13 ds14
                                                      -> case ds14 of wild8 {
                                                           [] -> GHC.Types.False
                                                           : ds15 ds16
                                                           -> case ds15 of wild9 { GHC.Types.I# ds17 ->
                                                              case ds17 of ds18 {
                                                                DEFAULT -> GHC.Types.False
                                                                1
                                                                -> case ds16 of wild10 {
                                                                     [] -> GHC.Types.False
                                                                     : ds19 ds20
                                                                     -> case ds20 of wild11 {
                                                                          [] -> GHC.Types.False
                                                                          : ds21 ds22
                                                                          -> case ds22 of wild12 {
                                                                               []
                                                                               -> case ds12 of wild13 {
                                                                                    []
                                                                                    -> GHC.Types.False
                                                                                    : ds23 ds24
                                                                                    -> case ds23 of wild14 {
                                                                                         []
                                                                                         -> GHC.Types.False
                                                                                         : ds25 ds26
                                                                                         -> case ds26 of wild15 {
                                                                                              []
                                                                                              -> GHC.Types.False
                                                                                              : ds27 ds28
                                                                                              -> case ds28 of wild16 {
                                                                                                   []
                                                                                                   -> GHC.Types.False
                                                                                                   : ds29 ds30
                                                                                                   -> case ds30 of wild17 {
                                                                                                        []
                                                                                                        -> GHC.Types.False
                                                                                                        : ds31 ds32
                                                                                                        -> case ds32 of wild18 {
                                                                                                             []
                                                                                                             -> case ds24 of wild19 {
                                                                                                                  []
                                                                                                                  -> GHC.Types.False
                                                                                                                  : ds33 ds34
                                                                                                                  -> case ds33 of wild20 {
                                                                                                                       []
                                                                                                                       -> GHC.Types.False
                                                                                                                       : ds35 ds36
                                                                                                                       -> case ds35 of wild21 { GHC.Types.I# ds37 ->
                                                                                                                          case ds37 of ds38 {
                                                                                                                            DEFAULT
                                                                                                                            -> GHC.Types.False
                                                                                                                            1
                                                                                                                            -> case ds36 of wild22 {
                                                                                                                                 []
                                                                                                                                 -> GHC.Types.False
                                                                                                                                 : ds39 ds40
                                                                                                                                 -> case ds40 of wild23 {
                                                                                                                                      []
                                                                                                                                      -> GHC.Types.False
                                                                                                                                      : ds41 ds42
                                                                                                                                      -> case ds42 of wild24 {
                                                                                                                                           []
                                                                                                                                           -> GHC.Types.False
                                                                                                                                           : ds43 ds44
                                                                                                                                           -> case ds44 of wild25 {
                                                                                                                                                []
                                                                                                                                                -> case ds34 of wild26 {
                                                                                                                                                     []
                                                                                                                                                     -> GHC.Types.True
                                                                                                                                                     : ipv ipv1
                                                                                                                                                     -> GHC.Types.False }
                                                                                                                                                : ipv ipv1
                                                                                                                                                -> GHC.Types.False } } } } } } } }
                                                                                                             : ipv ipv1
                                                                                                             -> GHC.Types.False } } } } } }
                                                                               : ipv ipv1
                                                                               -> GHC.Types.False } } } } } } } }
                                            : ipv ipv1 -> GHC.Types.False } } } } } }) -}
0a80d8ccbd05f4fc579cb5462d061493
  matchConstraints ::
    [Futoshiki.Constraint] -> [Futoshiki.Move] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ cs :: [Futoshiki.Constraint]
                   ms :: [Futoshiki.Move] ->
                 let {
                   a1 :: Logic.Utils.Puzzle
                   = Logic.Utils.$wmovesToPuzzle Futoshiki.size 4 ms
                 } in
                 letrec {
                   go :: [Futoshiki.Constraint] -> GHC.Types.Bool -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ ds :: [Futoshiki.Constraint] eta :: GHC.Types.Bool ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case eta of wild1 {
                            GHC.Types.False -> go ys GHC.Types.False
                            GHC.Types.True
                            -> case y of wild2 { (,,) comparedTo a2 b ->
                               go
                                 ys
                                 (comparedTo
                                    (Futoshiki.$s!1 @ GHC.Types.Int a2 a1)
                                    (Futoshiki.$s!1 @ GHC.Types.Int b a1)) } } }
                 } in
                 go cs GHC.Types.True) -}
093cd98f098d2b55f050eaa43ddbd208
  movesToPuzzle :: [Logic.Utils.Move] -> Logic.Utils.Puzzle
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w2 :: [Logic.Utils.Move] ->
                 Logic.Utils.$wmovesToPuzzle Futoshiki.checkPuzzle1 4 w2) -}
1b0c8f3648b4e389b6fa2e910ee2b31e
  optimalPlay :: [Futoshiki.Move]
  {- Unfolding: (Futoshiki.optimalPlay1 Futoshiki.p) -}
61223b2e52a8153b95d6277354351346
  optimalPlay1 :: Logic.GameLogic.J Futoshiki.R [Futoshiki.Move]
  {- Unfolding: (Logic.GameLogic.bigotimes
                   @ Futoshiki.Move
                   @ Futoshiki.R
                   Futoshiki.epsilons) -}
c12dcce9157949655c6b1f7121258639
  p :: [Futoshiki.Move] -> Futoshiki.R
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ ms :: [Futoshiki.Move] ->
                 case Logic.Utils.$wcheckPuzzle
                        Futoshiki.size
                        4
                        GHC.Types.False
                        ms of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Futoshiki.matchConstraints
                             Futoshiki.constraints
                             ms of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Futoshiki.matchClues ms } }) -}
da3afcb7839893bce98bf7c7d7241e73
  prettyPrint :: [Logic.Utils.Move] -> GHC.Base.String
  {- Arity: 1, Unfolding: (Logic.Utils.prettyPrint Futoshiki.size) -}
a69dde2abb3cc7d5e4285fb04c689117
  size :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

