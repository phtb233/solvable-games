
==================== FINAL INTERFACE ====================
2016-07-28 16:46:22.031764 UTC

interface main@main:Sudoku6 7103
  interface hash: 77d85052b5a887840e6b38f4c34d977d
  ABI hash: 0d62d3c41d42ea42e0f98e8206278f76
  export-list hash: f1b1414900393de4b630dada01fa8713
  orphan hash: b19c454302831444e574fce2ef753eec
  flag hash: 1ba42ae73d0b95f43952688546ccbfaa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sudoku6.checkPuzzle
  Sudoku6.epsilons
  Sudoku6.main
  Sudoku6.matchClue
  Sudoku6.movesToPuzzle
  Sudoku6.optimalPlay
  Sudoku6.p
  Sudoku6.pPar
  Sudoku6.parEpsilons
  Sudoku6.parOptimalPlay
  Sudoku6.prettyPrint
  Sudoku6.size
  Sudoku6.valid
  Sudoku6.Coordinate
  Sudoku6.Move
  Sudoku6.Position
  Sudoku6.Puzzle
  Sudoku6.R
  Sudoku6.Value
module dependencies: GameLogic
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 parallel-3.2.1.0@paral_BEbrIfHgHtmEpYU5TfKWK9
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.Monoid 85b292b52bfd80ed619cddb767d638d3
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  GameLogic 0b53a799af830780d41d4547bedd253d
  exports: 317b64144625346fcdfb42c1fb88af54
  J d7de4bb8c2cf07d476f757e42c973f23
  bigotimes 0390703f8b24ec89a7aaa580f2c54eac
  find 19473f3b700cd7a01ba9465996d293bf
  setMinus 4ad413d40cc9382bca94a4a68753d099
import  -/  parallel-3.2.1.0@paral_BEbrIfHgHtmEpYU5TfKWK9:Control.Parallel.Strategies e559e49e970aa71559d76fa817ccb0ac
bdf5180c8fd756e3a5b153405e7c8013
  $ssort :: [Sudoku6.Coordinate] -> [Sudoku6.Coordinate]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: [Sudoku6.Coordinate] ->
                 Data.OldList.sortBy
                   @ Sudoku6.Coordinate
                   GHC.Classes.compareInt
                   eta) -}
2a1229480881c2c293dd0a6f4186c351
  $wxs ::
    GHC.Prim.Int#
    -> (# [Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move,
          [[Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
7f40c61db4f7d8b53f4c42d5d32850ec
  $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
b6a7cd04448b78ed8772c5039f03a374
  type Coordinate = GHC.Types.Int
95697f0efcdd24df09e6262bde498b1d
  type Move = [Sudoku6.Value]
9e6ae3c3345f883d8455929d213f2406
  type Position = (Sudoku6.Coordinate, Sudoku6.Coordinate)
d0a9a6283653a1c751027816d0344b3c
  type Puzzle =
    [(Sudoku6.Coordinate, Sudoku6.Coordinate, Sudoku6.Value)]
43592a2728cf7b2230f41a161156932b
  type R = GHC.Types.Bool
e16e9cd2a2f4760b68f24978aebd3199
  type Value = GHC.Types.Int
82d23be343472731b8635293619ec02f
  checkPuzzle :: Sudoku6.Puzzle -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U> -}
37b4c04bd4e2b35e3b9c714a9da3e1be
  epsilons :: [[Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move]
  {- Unfolding: (case Sudoku6.$wxs 6 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ ([Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move)
                   ww1
                   ww2 }) -}
4710e5ee2f1fe4478fd03bfa49b97bc0
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Sudoku6.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1f219cda64b16eaaa1c14e23c0833b0d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Sudoku6.checkPuzzle Sudoku6.main7 of wild {
                   GHC.Types.False
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Sudoku6.main6
                             GHC.Types.True
                             s of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, GHC.Tuple.() #) }
                   GHC.Types.True
                   -> case Sudoku6.matchClue Sudoku6.main_results of wild1 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Sudoku6.main6
                                  GHC.Types.True
                                  s of ds1 { (#,#) ipv ipv1 ->
                           (# ipv, GHC.Tuple.() #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Sudoku6.main2
                                  GHC.Types.True
                                  s of ds1 { (#,#) ipv ipv1 ->
                           (# ipv, GHC.Tuple.() #) } } }) -}
5323f2c98cd7e800eef2b7693264a87d
  main2 :: GHC.Base.String
  {- Unfolding: (Sudoku6.prettyPrint Sudoku6.main_results) -}
765f526a1bcf91b3931d17c0b146e52f
  main3 :: [[Sudoku6.Move]]
  {- Unfolding: (Sudoku6.main_go Sudoku6.main4) -}
2ff41d03428655185c97ac57eb4066fc
  main4 :: [[Sudoku6.Coordinate]]
  {- Unfolding: (GHC.Types.:
                   @ [Sudoku6.Coordinate]
                   Sudoku6.main_xs0
                   Sudoku6.main5) -}
b9601705347a96b7b8773ed226dcec54
  main5 :: [[Sudoku6.Coordinate]]
  {- Unfolding: (Data.OldList.permutations1
                   @ Sudoku6.Coordinate
                   Sudoku6.main_xs0
                   (GHC.Types.[] @ Sudoku6.Coordinate)) -}
55cd0276a4db406b9dcff4d591720ba4
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Couldn't solve this puzzle."#) -}
b8dbd222c97e7329a02a923842684279
  main7 :: Sudoku6.Puzzle
  {- Unfolding: (GHC.List.zip3
                   @ Sudoku6.Coordinate
                   @ Sudoku6.Coordinate
                   @ Sudoku6.Value
                   Sudoku6.movesToPuzzle_xs
                   Sudoku6.movesToPuzzle_ys
                   (Control.Parallel.Strategies.$sconcat
                      @ GHC.Types.Int
                      Sudoku6.main_results)) -}
1dec28ebfc1dc5a442c8e10ff66fa608
  main_a4 ::
    [[Sudoku6.Move]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[Sudoku6.Move]] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
89dc6b159871790bdeb6838f8a8658e5
  main_go :: [[Sudoku6.Coordinate]] -> [[Sudoku6.Move]]
  {- Arity: 1, Strictness: <S,1*U> -}
0a3404c8f6d237b3838b054c0d878e88
  main_results :: [Sudoku6.Move]
  {- Unfolding: (case Sudoku6.main_a4
                        Sudoku6.main3
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 GameLogic.find @ [Sudoku6.Move] ipv1 Sudoku6.p }) -}
35cdb68b7c2fabeb08dee649e7f41620
  main_xs0 :: [Sudoku6.Coordinate]
  {- Unfolding: (GHC.Enum.eftInt 1 6) -}
595291e32a74c3b7a445c52304a72e10
  matchClue :: [Sudoku6.Move] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
30ab833d4cbb333905bab7a8a6e313ea
  movesToPuzzle :: [Sudoku6.Move] -> Sudoku6.Puzzle
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x2 :: [Sudoku6.Move] ->
                 GHC.List.zip3
                   @ Sudoku6.Coordinate
                   @ Sudoku6.Coordinate
                   @ Sudoku6.Value
                   Sudoku6.movesToPuzzle_xs
                   Sudoku6.movesToPuzzle_ys
                   (Control.Parallel.Strategies.$sconcat @ GHC.Types.Int x2)) -}
6728e2b91eb59f5f1c6a351b94fd71f8
  movesToPuzzle1 :: ([Sudoku6.Coordinate], [Sudoku6.Coordinate])
  {- Unfolding: (Sudoku6.movesToPuzzle_go 1) -}
f85d628151ace9645524824d842d874a
  movesToPuzzle_go ::
    GHC.Prim.Int# -> ([Sudoku6.Coordinate], [Sudoku6.Coordinate])
  {- Arity: 1, Strictness: <L,U> -}
639c916e2697591ee845fbbd814c4267
  movesToPuzzle_xs :: [Sudoku6.Coordinate]
  {- Unfolding: (case Sudoku6.movesToPuzzle1 of wild { (,) xs ys ->
                 xs }) -}
b046902a1f70771d823ac5080a399ee5
  movesToPuzzle_ys :: [Sudoku6.Coordinate]
  {- Unfolding: (case Sudoku6.movesToPuzzle1 of wild { (,) xs ys ->
                 ys }) -}
e3486361e127f84de789531703dd7ec8
  optimalPlay :: [Sudoku6.Move]
  {- Unfolding: (Sudoku6.optimalPlay1 Sudoku6.p) -}
1463aaf405961ab8341205b444d96548
  optimalPlay1 :: GameLogic.J Sudoku6.R [Sudoku6.Move]
  {- Unfolding: (GameLogic.bigotimes
                   @ Sudoku6.Move
                   @ Sudoku6.R
                   Sudoku6.epsilons) -}
3d4e739cc3c41a4ab56d74256d068a45
  p :: [Sudoku6.Move] -> Sudoku6.R
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ ms :: [Sudoku6.Move] ->
                 case Sudoku6.checkPuzzle (Sudoku6.movesToPuzzle ms) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> Sudoku6.matchClue ms }) -}
8f3f24935a5cf00572b8238c51048b2b
  pPar :: [Sudoku6.Move] -> [Sudoku6.Move] -> Sudoku6.R
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ preceding :: [Sudoku6.Move] ms :: [Sudoku6.Move] ->
                 let {
                   ms' :: [Sudoku6.Move] = GHC.Base.++ @ [Sudoku6.Value] preceding ms
                 } in
                 case Sudoku6.checkPuzzle (Sudoku6.movesToPuzzle ms') of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> Sudoku6.matchClue ms' }) -}
7af6522235cc01cc434a9e5fa43c8fe6
  parEpsilons ::
    [Sudoku6.Move]
    -> [[Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ preceding :: [Sudoku6.Move] ->
                 case GHC.List.$wlenAcc
                        @ [Sudoku6.Value]
                        preceding
                        0 of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# 6 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False
                   -> GHC.Types.[]
                        @ ([Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move)
                   GHC.Types.True
                   -> let {
                        possibilities1 :: [[Sudoku6.Coordinate]]
                        = Data.OldList.\\
                            @ [Sudoku6.Coordinate]
                            GHC.Classes.$fEq[]_$s$fEq[]
                            Sudoku6.main4
                            preceding
                      } in
                      let {
                        x2 :: [Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move
                          {- Arity: 1, Strictness: <L,1*U>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ h :: [[Sudoku6.Coordinate]] ->
                                         GameLogic.find
                                           @ [Sudoku6.Coordinate]
                                           (GameLogic.setMinus
                                              @ [Sudoku6.Coordinate]
                                              GHC.Classes.$fOrd[]_$s$fOrd[]
                                              possibilities1
                                              h)) -}
                        = \ h :: [[Sudoku6.Coordinate]] ->
                          GameLogic.find
                            @ [Sudoku6.Coordinate]
                            (GameLogic.setMinus
                               @ [Sudoku6.Coordinate]
                               GHC.Classes.$fOrd[]_$s$fOrd[]
                               possibilities1
                               h)
                      } in
                      let {
                        lvl7 :: [[Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move]
                        = GHC.Types.:
                            @ ([Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move)
                            x2
                            (GHC.Types.[]
                               @ ([Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move))
                      } in
                      letrec {
                        $wxs2 :: GHC.Prim.Int#
                                 -> [[Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move]
                          {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                        = \ ww :: GHC.Prim.Int# ->
                          case ww of ds1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ ([Sudoku6.Move] -> GameLogic.J Sudoku6.R Sudoku6.Move)
                                 x2
                                 ($wxs2 (GHC.Prim.-# ds1 1))
                            1 -> lvl7 }
                      } in
                      $wxs2 y } }) -}
bc0c7be6bff4fd803710f8899f885cd8
  parOptimalPlay :: [Sudoku6.Move] -> [Sudoku6.Move]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ preceding :: [Sudoku6.Move] ->
                 GHC.Base.++
                   @ [Sudoku6.Value]
                   preceding
                   (GameLogic.bigotimes
                      @ Sudoku6.Move
                      @ Sudoku6.R
                      (Sudoku6.parEpsilons preceding)
                      (Sudoku6.pPar preceding))) -}
9df6e124cbd18c0f642e599fec090e6f
  prettyPrint :: [Sudoku6.Move] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ ms :: [Sudoku6.Move] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Sudoku6.prettyPrint_divider
                   (case GHC.Base.map
                           @ [Sudoku6.Value]
                           @ [GHC.Types.Char]
                           Sudoku6.prettyPrint1
                           ms of wild {
                      [] -> Sudoku6.prettyPrint_divider
                      : x2 xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x2
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Sudoku6.prettyPrint_divider
                                 xs1))
                           Sudoku6.prettyPrint_divider })) -}
59d84a8b32d83c1f29efc51d915287f9
  prettyPrint1 :: [Sudoku6.Value] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x2 :: [Sudoku6.Value] ->
                 GHC.CString.unpackAppendCString#
                   "| "#
                   (case GHC.Base.map
                           @ GHC.Types.Int
                           @ [GHC.Types.Char]
                           GHC.Show.$fShowInt_$cshow
                           x2 of wild {
                      [] -> Sudoku6.prettyPrint3
                      : x3 xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x3
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Sudoku6.prettyPrint2
                                 xs1))
                           Sudoku6.prettyPrint3 })) -}
60284bc2a28c3efa5bea67927f124e7e
  prettyPrint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " | "#) -}
bdf1ef0a33b3351b74a899733780eaee
  prettyPrint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " |"#) -}
8944e907c384565184f5d62e56e24608
  prettyPrint4 :: [GHC.Types.Char]
  {- Unfolding: (case Sudoku6.$wxs1 6 of wild {
                   []
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        Sudoku6.prettyPrint5
                   : ds1 xs
                   -> GHC.Base.++ @ GHC.Types.Char xs Sudoku6.prettyPrint5 }) -}
4deb714fa0e555276f8ffb82ff70d896
  prettyPrint5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " \n"#) -}
821a4729ea0bdd99e6786283bc35ea6e
  prettyPrint_divider :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   " \n\
                   \ "#
                   Sudoku6.prettyPrint4) -}
ac265ffd71a2ee131acf110a37c242ac
  size :: Sudoku6.Coordinate
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6) -}
3775f17100af407cfe6e44ede10fcb14
  valid :: Sudoku6.Puzzle -> Sudoku6.R
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) Sudoku6.checkPuzzle -}
"SPEC/Sudoku6 sort @ Coordinate" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                            Sudoku6.Coordinate
  Data.OldList.sort @ GHC.Types.Int $dOrd = Sudoku6.$ssort
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

