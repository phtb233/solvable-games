
==================== FINAL INTERFACE ====================
2016-07-28 17:18:20.800141 UTC

interface main@main:Futoshiki 7103
  interface hash: af64b55c8ef3aaa0f88a56201bc8e2ea
  ABI hash: 86e5ba0e8f0241c11b6e3df6782a0493
  export-list hash: e99d6623c339d389a63936bf71ceeda7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1ba42ae73d0b95f43952688546ccbfaa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Futoshiki.checkPuzzle
  Futoshiki.constraints
  Futoshiki.epsilons
  Futoshiki.getValue
  Futoshiki.main
  Futoshiki.matchClues
  Futoshiki.matchConstraints
  Futoshiki.movesToPuzzle
  Futoshiki.optimalPlay
  Futoshiki.p
  Futoshiki.prettyPrint
  Futoshiki.valid
  Futoshiki.Constraint
  Futoshiki.Coordinate
  Futoshiki.Move
  Futoshiki.Position
  Futoshiki.Puzzle
  Futoshiki.R
  Futoshiki.Value
module dependencies: GameLogic
package dependencies: base-4.8.2.0 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  GameLogic 0b53a799af830780d41d4547bedd253d
  exports: 317b64144625346fcdfb42c1fb88af54
  J d7de4bb8c2cf07d476f757e42c973f23
  bigotimes 0390703f8b24ec89a7aaa580f2c54eac
  find 19473f3b700cd7a01ba9465996d293bf
  setMinus 4ad413d40cc9382bca94a4a68753d099
14f3f5391e584680c335ebfb3c6f6fa3
  $wgetValue ::
    Futoshiki.Coordinate
    -> Futoshiki.Coordinate -> Futoshiki.Puzzle -> Futoshiki.Value
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: Futoshiki.Coordinate
                   ww1 :: Futoshiki.Coordinate
                   w :: Futoshiki.Puzzle ->
                 case w of wild {
                   [] -> GHC.Err.undefined @ Futoshiki.Value
                   : ipv ipv1
                   -> letrec {
                        go :: [(Futoshiki.Coordinate,
                                Futoshiki.Coordinate,
                                Futoshiki.Value)]
                              -> Data.Monoid.First
                                   (Futoshiki.Coordinate, Futoshiki.Coordinate, Futoshiki.Value)
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [(Futoshiki.Coordinate,
                                    Futoshiki.Coordinate,
                                    Futoshiki.Value)] ->
                          case ds of wild1 {
                            []
                            -> (GHC.Base.Nothing
                                  @ (Futoshiki.Coordinate, Futoshiki.Coordinate, Futoshiki.Value))
                                 `cast`
                               (Sym (Data.Monoid.NTCo:First[0]) <(Futoshiki.Coordinate,
                                                                  Futoshiki.Coordinate,
                                                                  Futoshiki.Value)>_N)
                            : y ys
                            -> case y of wild2 { (,,) x' y' ds1 ->
                               case ww of wild3 { GHC.Types.I# x2 ->
                               case x' of wild4 { GHC.Types.I# y1 ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# x2 y1) of wild5 {
                                 GHC.Types.False -> go ys
                                 GHC.Types.True
                                 -> case ww1 of wild6 { GHC.Types.I# x3 ->
                                    case y' of wild7 { GHC.Types.I# y2 ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x3 y2) of wild8 {
                                      GHC.Types.False -> go ys
                                      GHC.Types.True
                                      -> (GHC.Base.Just
                                            @ (Futoshiki.Coordinate,
                                               Futoshiki.Coordinate,
                                               Futoshiki.Value)
                                            wild2)
                                           `cast`
                                         (Sym (Data.Monoid.NTCo:First[0]) <(Futoshiki.Coordinate,
                                                                            Futoshiki.Coordinate,
                                                                            Futoshiki.Value)>_N) } } } } } } } }
                      } in
                      case (go wild)
                             `cast`
                           (Data.Monoid.NTCo:First[0] <(Futoshiki.Coordinate,
                                                        Futoshiki.Coordinate,
                                                        Futoshiki.Value)>_N) of wild1 {
                        GHC.Base.Nothing
                        -> case GHC.Err.undefined ret_ty Futoshiki.Value of {}
                        GHC.Base.Just v -> case v of wild2 { (,,) ds ds1 v1 -> v1 } } }) -}
5d36c5e33b5e5845a337bfa62d71bb52
  $wxs ::
    GHC.Prim.Int#
    -> (# [Futoshiki.Move] -> GameLogic.J Futoshiki.R Futoshiki.Move,
          [[Futoshiki.Move] -> GameLogic.J Futoshiki.R Futoshiki.Move] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
7022f22a91ce56ea8d1e603becf42e7c
  $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
8490028271ce7cb3c91bc12481cae816
  type Constraint =
    (Futoshiki.Value -> Futoshiki.Value -> GHC.Types.Bool,
     (Futoshiki.Coordinate, Futoshiki.Coordinate),
     (Futoshiki.Coordinate, Futoshiki.Coordinate))
a1a960918e4c1db0409ab03dbe868b59
  type Coordinate = GHC.Types.Int
a4ec90cf3a8392274a9c80d14a51872d
  type Move = [Futoshiki.Value]
60d52f77aed0e298166fcd411ea083e7
  type Position =
    (Futoshiki.Coordinate, Futoshiki.Coordinate, Futoshiki.Value)
255e2b7fb983813f0b9d14dad8d6688a
  type Puzzle = [Futoshiki.Position]
6a877439ac5a80f26837815f51d50a12
  type R = GHC.Types.Bool
4025d6e83da9862dfee268f01f23191f
  type Value = GHC.Types.Int
cdec82595787957f1a7bf28b09b83393
  checkPuzzle :: Futoshiki.Puzzle -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ xs :: Futoshiki.Puzzle ->
                 letrec {
                   go :: [Futoshiki.Coordinate] -> [[Futoshiki.Value]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Futoshiki.Coordinate] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [Futoshiki.Value]
                       : y ys
                       -> GHC.Types.:
                            @ [Futoshiki.Value]
                            (letrec {
                               go1 :: [(Futoshiki.Coordinate,
                                        Futoshiki.Coordinate,
                                        Futoshiki.Value)]
                                      -> [GHC.Types.Int]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ ds1 :: [(Futoshiki.Coordinate,
                                            Futoshiki.Coordinate,
                                            Futoshiki.Value)] ->
                                 case ds1 of wild1 {
                                   [] -> GHC.Types.[] @ GHC.Types.Int
                                   : y1 ys1
                                   -> case y1 of wild2 { (,,) ds2 y' ds3 ->
                                      case y' of wild3 { GHC.Types.I# x2 ->
                                      case y of wild4 { GHC.Types.I# y2 ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.==# x2 y2) of wild5 {
                                        GHC.Types.False -> go1 ys1
                                        GHC.Types.True
                                        -> GHC.Types.: @ GHC.Types.Int ds3 (go1 ys1) } } } } }
                             } in
                             Data.OldList.sortBy
                               @ Futoshiki.Value
                               GHC.Classes.compareInt
                               (go1 xs))
                            (go ys) }
                 } in
                 case (Futoshiki.checkPuzzle_go1 (go Futoshiki.checkPuzzle1))
                        `cast`
                      (Data.Monoid.NTCo:All[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> letrec {
                        go1 :: [Futoshiki.Coordinate] -> [[Futoshiki.Value]]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [Futoshiki.Coordinate] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ [Futoshiki.Value]
                            : y ys
                            -> GHC.Types.:
                                 @ [Futoshiki.Value]
                                 (letrec {
                                    go2 :: [(Futoshiki.Coordinate,
                                             Futoshiki.Coordinate,
                                             Futoshiki.Value)]
                                           -> [GHC.Types.Int]
                                      {- Arity: 1, Strictness: <S,1*U> -}
                                    = \ ds1 :: [(Futoshiki.Coordinate,
                                                 Futoshiki.Coordinate,
                                                 Futoshiki.Value)] ->
                                      case ds1 of wild2 {
                                        [] -> GHC.Types.[] @ GHC.Types.Int
                                        : y1 ys1
                                        -> case y1 of wild3 { (,,) x' ds2 ds3 ->
                                           case x' of wild4 { GHC.Types.I# x2 ->
                                           case y of wild5 { GHC.Types.I# y2 ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.==# x2 y2) of wild6 {
                                             GHC.Types.False -> go2 ys1
                                             GHC.Types.True
                                             -> GHC.Types.: @ GHC.Types.Int ds3 (go2 ys1) } } } } }
                                  } in
                                  Data.OldList.sortBy
                                    @ Futoshiki.Value
                                    GHC.Classes.compareInt
                                    (go2 xs))
                                 (go1 ys) }
                      } in
                      (Futoshiki.checkPuzzle_go (go1 Futoshiki.checkPuzzle1))
                        `cast`
                      (Data.Monoid.NTCo:All[0]) }) -}
c019275e406be7270cdc798a36c22951
  checkPuzzle1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1 4) -}
40685da7893580f49a3af59b7e67f180
  checkPuzzle_go :: [[Futoshiki.Value]] -> Data.Monoid.All
  {- Arity: 1, Strictness: <S,1*U> -}
cd94ad211f9cada3591abd8e94071162
  checkPuzzle_go1 :: [[Futoshiki.Value]] -> Data.Monoid.All
  {- Arity: 1, Strictness: <S,1*U> -}
db38110e979499466cef863b3b40828c
  constraints :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints15
                   Futoshiki.constraints1) -}
11d1e65bc74a4362d81f2a5188e36f31
  constraints1 :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints13
                   Futoshiki.constraints2) -}
e27aad45628549176d38ceb0772c47d0
  constraints10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints11, Futoshiki.constraints8)) -}
efe4c0cea510cc4a8789ac2d6ef18891
  constraints11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
7ba3053a737a68433644d22e457ece25
  constraints12 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints11, Futoshiki.constraints6)) -}
f964c5e4b87771d642554052c0dd3e3c
  constraints13 ::
    (Futoshiki.Value -> Futoshiki.Value -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.gtInt,
                  Futoshiki.constraints10,
                  Futoshiki.constraints14)) -}
a985961d8d74cb667f75a85ab0e32d8b
  constraints14 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints11, Futoshiki.constraints11)) -}
c287e3de274aac635cb19632ebe94753
  constraints15 ::
    (Futoshiki.Value -> Futoshiki.Value -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.ltInt,
                  Futoshiki.constraints18,
                  Futoshiki.constraints16)) -}
4e5031bff3b8def79d564e8695bb5ac1
  constraints16 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints17, Futoshiki.constraints11)) -}
3c6a606c438de1228ea63db9cd1389c0
  constraints17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4) -}
45e02e9ccfbfccbf5db2b58b0331491e
  constraints18 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints6, Futoshiki.constraints11)) -}
4d13c28f0a730bae6ff3c866676b031a
  constraints2 :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints9
                   Futoshiki.constraints3) -}
42529b8c6107c8e1be1809741b7b76a2
  constraints3 :: [Futoshiki.Constraint]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Futoshiki.Constraint
                   Futoshiki.constraints4
                   (GHC.Types.[] @ Futoshiki.Constraint)) -}
1d789888900cee976e398b516b661883
  constraints4 ::
    (Futoshiki.Value -> Futoshiki.Value -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.gtInt,
                  Futoshiki.constraints7,
                  Futoshiki.constraints5)) -}
d346b5e78d9d9c02375fbfa5bf336015
  constraints5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints6, Futoshiki.constraints6)) -}
d93db6add67a494ab72e56740384771f
  constraints6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
f144bc5f1dfc7cd3fb9254903fc6f918
  constraints7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Futoshiki.constraints8, Futoshiki.constraints6)) -}
a64c371a2b05d555766a916ff766e290
  constraints8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
ffa12959a292e6901a50805847816817
  constraints9 ::
    (Futoshiki.Value -> Futoshiki.Value -> GHC.Types.Bool,
     (GHC.Types.Int, GHC.Types.Int),
     (GHC.Types.Int, GHC.Types.Int))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Classes.gtInt,
                  Futoshiki.constraints12,
                  Futoshiki.constraints10)) -}
79bc73d647aafdcedaae36bbd19eaea7
  epsilons ::
    [[Futoshiki.Move] -> GameLogic.J Futoshiki.R Futoshiki.Move]
  {- Unfolding: (case Futoshiki.$wxs 4 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ ([Futoshiki.Move] -> GameLogic.J Futoshiki.R Futoshiki.Move)
                   ww1
                   ww2 }) -}
cfd9b72fc1433ed1c711cbf66fec8934
  getValue ::
    (Futoshiki.Coordinate, Futoshiki.Coordinate)
    -> Futoshiki.Puzzle -> Futoshiki.Value
  {- Arity: 2, Strictness: <S,1*U(U(U),U(U))><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (Futoshiki.Coordinate, Futoshiki.Coordinate)
                   w1 :: Futoshiki.Puzzle ->
                 case w of ww { (,) ww1 ww2 -> Futoshiki.$wgetValue ww1 ww2 w1 }) -}
d905ddaac298002a8142bcdca7d329cc
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Futoshiki.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
43617597ac52e3dc6f6aae5428e4ee2a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (Futoshiki.prettyPrint Futoshiki.optimalPlay)
                   GHC.Types.True
                   eta) -}
dd271bda24a5a0902fdc3b258fcdcec1
  matchClues :: [Futoshiki.Move] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Futoshiki.Move] ->
                 case ds of wild {
                   [] -> GHC.Types.False
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        [] -> GHC.Types.False
                        : ds3 ds4
                        -> case ds4 of wild2 {
                             [] -> GHC.Types.False
                             : ds5 ds6
                             -> case ds6 of wild3 {
                                  [] -> GHC.Types.False
                                  : ds7 ds8
                                  -> case ds8 of wild4 {
                                       [] -> GHC.Types.False
                                       : ds9 ds10
                                       -> case ds10 of wild5 {
                                            []
                                            -> case ds2 of wild6 {
                                                 [] -> GHC.Types.False
                                                 : ds11 ds12
                                                 -> case ds11 of wild7 {
                                                      [] -> GHC.Types.False
                                                      : ds13 ds14
                                                      -> case ds14 of wild8 {
                                                           [] -> GHC.Types.False
                                                           : ds15 ds16
                                                           -> case ds15 of wild9 { GHC.Types.I# ds17 ->
                                                              case ds17 of ds18 {
                                                                DEFAULT -> GHC.Types.False
                                                                1
                                                                -> case ds16 of wild10 {
                                                                     [] -> GHC.Types.False
                                                                     : ds19 ds20
                                                                     -> case ds20 of wild11 {
                                                                          [] -> GHC.Types.False
                                                                          : ds21 ds22
                                                                          -> case ds22 of wild12 {
                                                                               []
                                                                               -> case ds12 of wild13 {
                                                                                    []
                                                                                    -> GHC.Types.False
                                                                                    : ds23 ds24
                                                                                    -> case ds23 of wild14 {
                                                                                         []
                                                                                         -> GHC.Types.False
                                                                                         : ds25 ds26
                                                                                         -> case ds26 of wild15 {
                                                                                              []
                                                                                              -> GHC.Types.False
                                                                                              : ds27 ds28
                                                                                              -> case ds28 of wild16 {
                                                                                                   []
                                                                                                   -> GHC.Types.False
                                                                                                   : ds29 ds30
                                                                                                   -> case ds30 of wild17 {
                                                                                                        []
                                                                                                        -> GHC.Types.False
                                                                                                        : ds31 ds32
                                                                                                        -> case ds32 of wild18 {
                                                                                                             []
                                                                                                             -> case ds24 of wild19 {
                                                                                                                  []
                                                                                                                  -> GHC.Types.False
                                                                                                                  : ds33 ds34
                                                                                                                  -> case ds33 of wild20 {
                                                                                                                       []
                                                                                                                       -> GHC.Types.False
                                                                                                                       : ds35 ds36
                                                                                                                       -> case ds35 of wild21 { GHC.Types.I# ds37 ->
                                                                                                                          case ds37 of ds38 {
                                                                                                                            DEFAULT
                                                                                                                            -> GHC.Types.False
                                                                                                                            1
                                                                                                                            -> case ds36 of wild22 {
                                                                                                                                 []
                                                                                                                                 -> GHC.Types.False
                                                                                                                                 : ds39 ds40
                                                                                                                                 -> case ds40 of wild23 {
                                                                                                                                      []
                                                                                                                                      -> GHC.Types.False
                                                                                                                                      : ds41 ds42
                                                                                                                                      -> case ds42 of wild24 {
                                                                                                                                           []
                                                                                                                                           -> GHC.Types.False
                                                                                                                                           : ds43 ds44
                                                                                                                                           -> case ds44 of wild25 {
                                                                                                                                                []
                                                                                                                                                -> case ds34 of wild26 {
                                                                                                                                                     []
                                                                                                                                                     -> GHC.Types.True
                                                                                                                                                     : ipv ipv1
                                                                                                                                                     -> GHC.Types.False }
                                                                                                                                                : ipv ipv1
                                                                                                                                                -> GHC.Types.False } } } } } } } }
                                                                                                             : ipv ipv1
                                                                                                             -> GHC.Types.False } } } } } }
                                                                               : ipv ipv1
                                                                               -> GHC.Types.False } } } } } } } }
                                            : ipv ipv1 -> GHC.Types.False } } } } } }) -}
2a8edcfcdadbaf8030e267d3d0c26d7b
  matchConstraints ::
    [Futoshiki.Constraint] -> [Futoshiki.Move] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ cs :: [Futoshiki.Constraint]
                   ms :: [Futoshiki.Move] ->
                 let {
                   a1 :: Futoshiki.Puzzle
                   = GHC.List.zip3
                       @ Futoshiki.Coordinate
                       @ Futoshiki.Coordinate
                       @ Futoshiki.Value
                       Futoshiki.matchConstraints_xs
                       Futoshiki.matchConstraints_ys
                       (Control.Parallel.Strategies.$sconcat @ GHC.Types.Int ms)
                 } in
                 letrec {
                   go :: [Futoshiki.Constraint] -> GHC.Types.Bool -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ ds :: [Futoshiki.Constraint] eta :: GHC.Types.Bool ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case eta of wild1 {
                            GHC.Types.False -> go ys GHC.Types.False
                            GHC.Types.True
                            -> case y of wild2 { (,,) comparedTo a2 b ->
                               go
                                 ys
                                 (comparedTo
                                    (Futoshiki.getValue a2 a1)
                                    (Futoshiki.getValue b a1)) } } }
                 } in
                 go cs GHC.Types.True) -}
895a241f1a1742b0b3973bad3c005f32
  matchConstraints1 ::
    ([Futoshiki.Coordinate], [Futoshiki.Coordinate])
  {- Unfolding: (Futoshiki.matchConstraints_go 1) -}
9256340df42634374c7881edc826eb8b
  matchConstraints_go ::
    GHC.Prim.Int# -> ([Futoshiki.Coordinate], [Futoshiki.Coordinate])
  {- Arity: 1, Strictness: <L,U> -}
ca97e2cb12ddfc9fec9661e4e8b957e4
  matchConstraints_xs :: [Futoshiki.Coordinate]
  {- Unfolding: (case Futoshiki.matchConstraints1 of wild { (,) xs ys ->
                 xs }) -}
021697d2d9e4f4471c5cb55ddc916c6b
  matchConstraints_ys :: [Futoshiki.Coordinate]
  {- Unfolding: (case Futoshiki.matchConstraints1 of wild { (,) xs ys ->
                 ys }) -}
421aef3dabaff9a401c5f9daf1a67979
  movesToPuzzle :: [Futoshiki.Move] -> Futoshiki.Puzzle
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x2 :: [Futoshiki.Move] ->
                 GHC.List.zip3
                   @ Futoshiki.Coordinate
                   @ Futoshiki.Coordinate
                   @ Futoshiki.Value
                   Futoshiki.matchConstraints_xs
                   Futoshiki.matchConstraints_ys
                   (Control.Parallel.Strategies.$sconcat @ GHC.Types.Int x2)) -}
a5b072d958048e10f7bd3ba0aaefd002
  optimalPlay :: [Futoshiki.Move]
  {- Unfolding: (Futoshiki.optimalPlay1 Futoshiki.p) -}
2bee2acaf69cb766a2df02f7022ca39f
  optimalPlay1 :: GameLogic.J Futoshiki.R [Futoshiki.Move]
  {- Unfolding: (GameLogic.bigotimes
                   @ Futoshiki.Move
                   @ Futoshiki.R
                   Futoshiki.epsilons) -}
857654899e0638bd274446706776b052
  p :: [Futoshiki.Move] -> Futoshiki.R
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ ms :: [Futoshiki.Move] ->
                 case Futoshiki.checkPuzzle (Futoshiki.movesToPuzzle ms) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Futoshiki.matchConstraints
                             Futoshiki.constraints
                             ms of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Futoshiki.matchClues ms } }) -}
bf7ed2df1343bb6d6a847e615b524b0b
  prettyPrint :: [Futoshiki.Move] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ ms :: [Futoshiki.Move] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Futoshiki.prettyPrint_divider
                   (case GHC.Base.map
                           @ [Futoshiki.Value]
                           @ [GHC.Types.Char]
                           Futoshiki.prettyPrint1
                           ms of wild {
                      [] -> Futoshiki.prettyPrint_divider
                      : x2 xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x2
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Futoshiki.prettyPrint_divider
                                 xs1))
                           Futoshiki.prettyPrint_divider })) -}
ebd63c84ab762dd2ef99fec3abab584e
  prettyPrint1 :: [Futoshiki.Value] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x2 :: [Futoshiki.Value] ->
                 GHC.CString.unpackAppendCString#
                   "| "#
                   (case GHC.Base.map
                           @ GHC.Types.Int
                           @ [GHC.Types.Char]
                           GHC.Show.$fShowInt_$cshow
                           x2 of wild {
                      [] -> Futoshiki.prettyPrint3
                      : x3 xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x3
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Futoshiki.prettyPrint2
                                 xs1))
                           Futoshiki.prettyPrint3 })) -}
70ad259d502e6fb11fcb9e4bf63d94b7
  prettyPrint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " | "#) -}
14db05e0070d19a32bde78665419b6ea
  prettyPrint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " |"#) -}
0d8c0d041c74cd77e63c9782da5a4253
  prettyPrint4 :: [GHC.Types.Char]
  {- Unfolding: (case Futoshiki.$wxs1 4 of wild {
                   []
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        Futoshiki.prettyPrint5
                   : ds1 xs
                   -> GHC.Base.++ @ GHC.Types.Char xs Futoshiki.prettyPrint5 }) -}
3ec232b1904cca38d4f1bdb23ecdf637
  prettyPrint5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " \n"#) -}
627ca035b4da30806adeca9b23f73870
  prettyPrint_divider :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   " \n\
                   \ "#
                   Futoshiki.prettyPrint4) -}
cd799a19f76a49102766c207999afd55
  valid :: Futoshiki.Puzzle -> Futoshiki.R
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) Futoshiki.checkPuzzle -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

